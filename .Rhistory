quartier = first(quartier),
phone_number = first(phone_number),
) %>%
ungroup()
View(geo)
geo <- df_geo %>%
select(phone_number,quartier,geometry) %>%
group_by(phone_number,quartier) %>% #,quartier,geometry
summarise(
quartier = first(quartier),
phone_number = first(phone_number),
geometry = first(geometry)
) %>%
ungroup()
View(geo)
df_geo %>% group_by(quartier) %>% summarise(count=n())
View(data)
View(geo)
df <- df_geo %>% group_by(quartier) %>% summarise(count=n())
View(df_geo)
df <- geo %>% group_by(quartier) %>% summarise(count=n())
# Séparer la colonne 'location' en deux colonnes 'longitude' et 'latitude'
df1 <- df %>%
separate(geometry, into = c("type", "coordinates"), sep = " ", extra = "merge") %>%
mutate(coordinates = str_replace_all(coordinates, "[()]", "")) %>%
separate(coordinates, into = c("longitude", "latitude"), sep = " ")
df <- geo %>% group_by(quartier,geometry) %>% summarise(count=n())
# Séparer la colonne 'location' en deux colonnes 'longitude' et 'latitude'
df1 <- df %>%
separate(geometry, into = c("type", "coordinates"), sep = " ", extra = "merge") %>%
mutate(coordinates = str_replace_all(coordinates, "[()]", "")) %>%
separate(coordinates, into = c("longitude", "latitude"), sep = " ")
View(df1)
# Créer un dataframe d'exemple
df1 <- tibble(location = c("POINT (11.54817 3.763607)", "POINT (10.74817 4.563607)"))
# Séparer la colonne 'location' en deux colonnes 'longitude' et 'latitude'
df1 <- df1 %>%
separate(location, into = c("type", "coordinates"), sep = " ", extra = "merge") %>%
mutate(coordinates = str_replace_all(coordinates, "[()]", "")) %>%
separate(coordinates, into = c("longitude", "latitude"), sep = " ") %>%
mutate(across(c(longitude, latitude), as.numeric)) %>%
select(-type)
View(df1)
# Créer un dataframe d'exemple
df1 <- tibble(location = c("POINT (11.54817 3.763607)", "POINT (10.74817 4.563607)"))
View(df1)
View(df_geo)
df <- geo %>% group_by(quartier,geometry) %>% summarise(count=n())
# Séparer la colonne 'location' en deux colonnes 'longitude' et 'latitude'
df1 <- df %>%
separate(geometry, into = c("type", "coordinates"), sep = " ", extra = "merge") %>%
mutate(coordinates = str_replace_all(coordinates, "[()]", "")) %>%
separate(coordinates, into = c("longitude", "latitude"), sep = " ") %>%
mutate(across(c(longitude, latitude), as.numeric)) %>%
select(-type)
View(df1)
# Supprimer le texte "POINT (" et ")" pour obtenir uniquement les coordonnées
df$geometry <- gsub("POINT \\(|\\)", "", df$geometry)
# Diviser la colonne 'location' en deux colonnes 'longitude' et 'latitude'
coords <- strsplit(df$geometry, " ")
# Créer deux nouvelles colonnes 'longitude' et 'latitude'
df$longitude <- as.numeric(sapply(coords, "[", 1))
df$latitude <- as.numeric(sapply(coords, "[", 2))
View(df)
View(data_geo)
df <- geo %>% group_by(quartier,geometry) %>% summarise(count=n())
# Supprimer le texte "POINT (" et ")" pour obtenir uniquement les coordonnées
df$geometry <- gsub("POINT \\(", "", df$geometry)
df$geometry <- gsub("\\)", "", df$geometry) )
df$geometry <- gsub("\\)", "", df$geometry)
View(df)
df$geometry <- gsub("c\\(", "", df$geometry)
View(df)
# Séparer la colonne 'location' en deux colonnes 'longitude' et 'latitude'
df <- df %>%
separate(location, into = c("longitude", "latitude"), sep = ", ") %>%
mutate(across(c(longitude, latitude), as.numeric))
# Séparer la colonne 'location' en deux colonnes 'longitude' et 'latitude'
df <- df %>%
separate(geometry, into = c("longitude", "latitude"), sep = ", ") %>%
mutate(across(c(longitude, latitude), as.numeric))
View(df)
world <- maps::map("world", fill=TRUE, plot=FALSE)
world_map <- maptools::map2SpatialPolygons(world, sub(":.*$", "", world$names))
library(maps)
library(sp)
install.packages("maps")
world <- maps::map("world", fill=TRUE, plot=FALSE)
world_map <- maptools::map2SpatialPolygons(world, sub(":.*$", "", world$names))
install.packages("maptools")
library(maptools)
world_map <- maptools::map2SpatialPolygons(world, sub(":.*$", "", world$names))
world_map <- sp::SpatialPolygonsDataFrame(world_map,
data.frame(country=names(world_map),
stringsAsFactors=FALSE),
FALSE)
choosen_countries <- "Cameroon"
target_map <- subset(world_map, country %in% choosen_countries)
fig_map <- leaflet(data = target_map) %>%
addTiles() %>%
addPolygons(weight=1) %>%
leaflet::addTiles() %>%
leaflet::addAwesomeMarkers(
#layerId = ~id,
data = df,
lng = ~longitude, lat = ~latitude,
label = paste(df$quartier,
df$count,
sep = " / "),
clusterOptions = leaflet::markerClusterOptions())
fig_map
View(df)
list_to_exclude <- c("BASTOS","MADAGASCAR","MELEN","MENDONG","NSAM","MESSA","MANGUIER","EMANA","NGOUSSO")
data_geo <- data_geo %>%
filter(!name %in% list_to_exclude)
data_geo$name <- gsub("EMOMBO CHAPELLE","EMOMBO",data_geo$name)
data_geo$name <- gsub("CARREFOUR BIYEM-ASSI","BIYEM ASSI",data_geo$name)
data_geo$name <- gsub("CARREFOUR MESSASSI","MESSASSI",data_geo$name)
data_geo$name <- gsub("EMOMBO CHAPELLE","EMOMBO",data_geo$name)
data_geo$name <- gsub("CARREFOUR JOUVENCE","JOUVENCE",data_geo$name)
data_geo$name <- gsub("SANTA LUCIA AHALA","AHALA",data_geo$name)
data_geo$name <- gsub("TOTAL ETOUDI","ÉTOUDI",data_geo$name)
data_geo$name <- gsub("CARREFOUR TSINGA VILLAGE","TSINGA VILLAGE",data_geo$name)
data_geo$name <- gsub("CARREFOUR RÉGIE","REGIS",data_geo$name)
data_geo$name <- gsub("CARREFOUR AWAÉ","AWAE",data_geo$name)
data_geo$name <- gsub("PHARMACIE NKOZOA","NKOZOA",data_geo$name)
data_geo$name <- gsub("PHARMACIE NKOZOA","NKOZOA",data_geo$name)
data_geo$name <- gsub("NGOA EKELE CHÂTEAU","NGOA EKELE",data_geo$name)
data_geo$name <- gsub("ROND-POINT NLONGKAK","NLONKAK",data_geo$name)
data_geo$name <- gsub("MARCHE CENTRAL DE LEBOUDI","LEBOUDI",data_geo$name)
data_geo$name <- gsub("ROND-POINT BASTOS","BASTOS",data_geo$name)
data_geo$name <- gsub("CITÉ SIC MADAGASCAR","MADAGASCAR",data_geo$name)
data_geo$name <- gsub("TOTAL MELEN","MELEN",data_geo$name)
data_geo$name <- gsub("DOVV MENDONG","MENDONG",data_geo$name)
data_geo$name <- gsub("CARREFOUR NSAM","NSAM",data_geo$name)
data_geo$name <- gsub("CAMP SIC MESSA","MESSA",data_geo$name)
data_geo$name <- gsub("RUE MANGUIERS","MANGUIER",data_geo$name)
data_geo$name <- gsub("EMANA PONT","EMANA",data_geo$name)
data_geo$name <- gsub("DOVV NGOUSSO","NGOUSSO",data_geo$name)
df_geo <- fuzzyjoin::stringdist_left_join(data, data_geo,
by = c("quartier" = "name"),
method = "jw",
max_dist = 0.01,
distance_col = "distance")
geo <- df_geo %>%
select(phone_number,quartier,geometry) %>%
group_by(phone_number,quartier) %>% #,quartier,geometry
summarise(
quartier = first(quartier),
phone_number = first(phone_number),
geometry = first(geometry)
) %>%
ungroup()
df <- geo %>% group_by(quartier,geometry) %>% summarise(count=n())
# Supprimer le texte "POINT (" et ")" pour obtenir uniquement les coordonnées
df$geometry <- gsub("POINT \\(", "", df$geometry)
df$geometry <- gsub("\\)", "", df$geometry)
df$geometry <- gsub("c\\(", "", df$geometry)
# Séparer la colonne 'location' en deux colonnes 'longitude' et 'latitude'
df <- df %>%
separate(geometry, into = c("longitude", "latitude"), sep = ", ") %>%
mutate(across(c(longitude, latitude), as.numeric))
world <- maps::map("world", fill=TRUE, plot=FALSE)
world_map <- maptools::map2SpatialPolygons(world, sub(":.*$", "", world$names))
world_map <- sp::SpatialPolygonsDataFrame(world_map,
data.frame(country=names(world_map),
stringsAsFactors=FALSE),
FALSE)
choosen_countries <- "Cameroon"
target_map <- subset(world_map, country %in% choosen_countries)
fig_map <- leaflet(data = target_map) %>%
addTiles() %>%
addPolygons(weight=1) %>%
leaflet::addTiles() %>%
leaflet::addAwesomeMarkers(
#layerId = ~id,
data = df,
lng = ~longitude, lat = ~latitude,
label = paste(df$quartier,
df$count,
sep = " / "),
clusterOptions = leaflet::markerClusterOptions())
fig_map
View(geo)
geo <- df_geo %>%
select(phone_number,ville,carimo_product,formatted_date,quartier,geometry) %>%
group_by(phone_number,quartier) %>% #,quartier,geometry
summarise(
quartier = first(quartier),
phone_number = first(phone_number),
geometry = first(geometry)
) %>%
ungroup()
View(geo)
geo <- df_geo %>%
select(phone_number,ville,carimo_product,formatted_date,quartier,geometry) %>%
group_by(phone_number,quartier) %>% #,quartier,geometry
summarise(
quartier = first(quartier),
ville = first(ville),
phone_number = first(phone_number),
geometry = first(geometry)
) %>%
ungroup()
geo <- df_geo %>%
select(phone_number,ville,carimo_product,formatted_date,quartier,geometry) %>%
group_by(phone_number,quartier) %>% #,quartier,geometry
summarise(
quartier = first(quartier),
ville = first(ville),
carimo_product = first(carimo_product),
formatted_date = first(formatted_date),
phone_number = first(phone_number),
geometry = first(geometry)
) %>%
ungroup()
View(geo)
df <- geo %>% group_by(quartier,geometry) %>% summarise(count=n())
View(df)
geo$geometry <- gsub("POINT \\(", "", geo$geometry)
geo$geometry <- gsub("\\)", "", geo$geometry)
geo$geometry <- gsub("c\\(", "", geo$geometry)
geo <- geo %>%
separate(geometry, into = c("longitude", "latitude"), sep = ", ") %>%
mutate(across(c(longitude, latitude), as.numeric))
View(geo)
fig_map <- leaflet(data = target_map) %>%
addTiles() %>%
addPolygons(weight=1) %>%
leaflet::addTiles() %>%
leaflet::addAwesomeMarkers(
#layerId = ~id,
data = geo,
lng = ~longitude, lat = ~latitude,
label = paste(geo$quartier,
geo$count,
sep = " / "),
clusterOptions = leaflet::markerClusterOptions())
fig_map
unique(data_unique$quartier)
View(geo)
df <- geo %>% group_by(quartier) %>% summarise(count=n())
View(df)
df <- geo %>% select(quartier,longitude,latitude)
df <- geo %>% select(phone_number,ville,carimo_product,formatted_date,quartier,geometry)
df <- geo %>% select(phone_number,ville,carimo_product,formatted_date,quartier,longitude,latitude)
geo <- geo %>%
select(phone_number,ville,carimo_product,formatted_date,quartier,longitude,latitude)%>%
group_by(quartier) %>% summarise(count=n())
fig_map <- leaflet(data = target_map) %>%
addTiles() %>%
addPolygons(weight=1) %>%
leaflet::addTiles() %>%
leaflet::addAwesomeMarkers(
#layerId = ~id,
data = geo,
lng = ~longitude, lat = ~latitude,
label = paste(geo$quartier,
geo$count,
sep = " / "),
clusterOptions = leaflet::markerClusterOptions())
fig_map
df <- geo %>%
select(phone_number,ville,carimo_product,formatted_date,quartier,longitude,latitude)%>%
group_by(quartier) %>% summarise(count=n())
geo <- df_geo %>%
select(phone_number,ville,carimo_product,formatted_date,quartier,geometry) %>%
group_by(phone_number,quartier) %>% #,quartier,geometry
summarise(
quartier = first(quartier),
ville = first(ville),
carimo_product = first(carimo_product),
formatted_date = first(formatted_date),
phone_number = first(phone_number),
geometry = first(geometry)
) %>%
ungroup()
geo$geometry <- gsub("POINT \\(", "", geo$geometry)
geo$geometry <- gsub("\\)", "", geo$geometry)
geo$geometry <- gsub("c\\(", "", geo$geometry)
geo <- geo %>%
separate(geometry, into = c("longitude", "latitude"), sep = ", ") %>%
mutate(across(c(longitude, latitude), as.numeric))
View(geo)
df <- geo %>%
select(phone_number,ville,carimo_product,formatted_date,quartier,longitude,latitude)%>%
group_by(quartier) %>% summarise(count=n())
runApp()
# Lire le fichier .pbf
data_geo <- st_read(file_path)
saveRDS(data_geo,".data/quaters.rds")
saveRDS(data_geo,paste("data/","qquaters",".rds",sep=""))
data_geo <- readRDS("data/quaters.rds")
data_geo <- readRDS("data/qquaters.rds")
runApp()
View(geo)
geo %>% group_by(quartier) %>%
summarise(count=n())
runApp()
runApp()
runApp()
runApp()
runApp()
geoo <- geo %>%
filter(formatted_date>="2024-06-06" & formatted_date<="2024-06-08") %>%
filter(ville=="YAOUNDE") %>%
filter(carimo_product=="ANCIEN")
View(geo)
geoo <- geo %>%
filter(formatted_date>="2024-06-27" & formatted_date<="2024-06-29") %>%
filter(ville=="YAOUNDE") %>%
filter(carimo_product=="ANCIEN")
View(geo)
geoo <- geo %>%
filter(formatted_date>="2024-06-27" & formatted_date<="2024-06-29") %>%
filter(ville=="YAOUNDÉ") %>%
filter(carimo_product=="ANCIEN")
geoo <- geoo %>% group_by(quartier) %>%
summarise(count=n())
View(geoo)
geoo <- geo %>%
filter(formatted_date>="2024-06-27" & formatted_date<="2024-06-29") %>%
filter(ville=="YAOUNDÉ") %>%
filter(carimo_product=="ANCIEN")
f <- geoo %>% group_by(quartier,longitude,latitude) %>%
summarise(count=n())
View(f)
runApp()
readRDS("data/localisation.rds")
runApp()
runApp()
runApp()
runApp()
file_path <- "./data/cameroon-latest.osm.pbf"
# Lire le fichier .pbf
#data_geo <- st_read(file_path)
data_geo <- readRDS("data/qquaters.rds")
data_geo$name <- str_to_upper(data_geo$name)
list_to_exclude <- c("BASTOS","MADAGASCAR","MELEN","MENDONG","NSAM","MESSA","MANGUIER","EMANA","NGOUSSO")
data_geo <- data_geo %>%
filter(!name %in% list_to_exclude)
data_geo$name <- gsub("EMOMBO CHAPELLE","EMOMBO",data_geo$name)
data_geo$name <- gsub("CARREFOUR BIYEM-ASSI","BIYEM ASSI",data_geo$name)
data_geo$name <- gsub("CARREFOUR MESSASSI","MESSASSI",data_geo$name)
data_geo$name <- gsub("EMOMBO CHAPELLE","EMOMBO",data_geo$name)
data_geo$name <- gsub("CARREFOUR JOUVENCE","JOUVENCE",data_geo$name)
data_geo$name <- gsub("SANTA LUCIA AHALA","AHALA",data_geo$name)
data_geo$name <- gsub("TOTAL ETOUDI","ÉTOUDI",data_geo$name)
data_geo$name <- gsub("CARREFOUR TSINGA VILLAGE","TSINGA VILLAGE",data_geo$name)
data_geo$name <- gsub("CARREFOUR RÉGIE","REGIS",data_geo$name)
data_geo$name <- gsub("CARREFOUR AWAÉ","AWAE",data_geo$name)
data_geo$name <- gsub("PHARMACIE NKOZOA","NKOZOA",data_geo$name)
data_geo$name <- gsub("PHARMACIE NKOZOA","NKOZOA",data_geo$name)
data_geo$name <- gsub("NGOA EKELE CHÂTEAU","NGOA EKELE",data_geo$name)
data_geo$name <- gsub("ROND-POINT NLONGKAK","NLONKAK",data_geo$name)
data_geo$name <- gsub("MARCHE CENTRAL DE LEBOUDI","LEBOUDI",data_geo$name)
data_geo$name <- gsub("ROND-POINT BASTOS","BASTOS",data_geo$name)
data_geo$name <- gsub("CITÉ SIC MADAGASCAR","MADAGASCAR",data_geo$name)
data_geo$name <- gsub("TOTAL MELEN","MELEN",data_geo$name)
data_geo$name <- gsub("DOVV MENDONG","MENDONG",data_geo$name)
data_geo$name <- gsub("CARREFOUR NSAM","NSAM",data_geo$name)
data_geo$name <- gsub("CAMP SIC MESSA","MESSA",data_geo$name)
data_geo$name <- gsub("RUE MANGUIERS","MANGUIER",data_geo$name)
data_geo$name <- gsub("EMANA PONT","EMANA",data_geo$name)
data_geo$name <- gsub("DOVV NGOUSSO","NGOUSSO",data_geo$name)
View(data_geo)
# Fonction pour convertir les valeurs numériques en dates et les catégoriser
convert_and_categorize <- function(x) {
if (grepl("^\\d+$", x)) {
date <- as.Date("1900-01-01") + as.numeric(x) - 2
age <- as.numeric(format(Sys.Date(), "%Y")) - as.numeric(format(date, "%Y"))
if (age < 18){
return("18-25")
}else if (age >= 18 && age <= 25) {
return("18-25")
} else if (age >= 26 && age <= 35) {
return("26-35")
} else if (age >= 36 && age <= 55) {
return("36-55")
} else {
return("56+")
}
} else {
return(x)
}
}
villes_connues <- c("YAOUNDÉ", "EDEA","BAFOUSSAM","MAROUA","GAROUA")
# Fonction pour extraire la ville
extract_ville <- function(location) {
match <- str_extract(location, paste(villes_connues, collapse = "|"))
return(ifelse(is.na(match), "", match))
}
# Fonction pour extraire le quartier
extract_quartier <- function(location, ville) {
if (ville != "") {
return(str_trim(gsub(ville, "", location)))
} else {
return(location)
}
}
#function to extract date
extract_and_format_date <- function(datetime_str) {
parts <- strsplit(datetime_str, " ")[[1]]
day <- parts[3]
month <- parts[2]
year <- parts[4]
months <- c("Jan" = "01", "Feb" = "02", "Mar" = "03", "Apr" = "04", "May" = "05", "Jun" = "06",
"Jul" = "07", "Aug" = "08", "Sep" = "09", "Oct" = "10", "Nov" = "11", "Dec" = "12")
formatted_date <- paste(year, months[month], day, sep = "-")
return(formatted_date)
}
# Spécifiez le chemin du dossier contenant les fichiers Excel
path <- getwd()
folder_path <- paste(path,"/data",sep = "")
#data <- read.csv(paste(folder_path,"/users.csv",sep = ""))
data <- read_excel((paste(folder_path,"/users.xls",sep = "")))
data1 <- read_excel((paste(folder_path,"/carimo_data_0308_07.xlsx",sep = "")))
data2 <- read_excel((paste(folder_path,"/carimo_0910_07.xlsx",sep = "")))
data$achat_category <- str_to_lower(data$achat_category)
data1$achat_category <- str_to_lower(data1$achat_category)
data2$achat_category <- str_to_lower(data2$achat_category)
path_product <- paste(folder_path,"/carimo_products_1.xlsx", sep = "")
products <- read_excel(path_product,sheet = "products")
data <- data %>%
filter(!str_detect(name, "Marc Arthur FOUDA") & !str_detect(name, "DOM") & !str_detect(name, "dom2")
& !str_detect(name, "Kaeyros") & !str_detect(achat_category, "Test") & !str_detect(achat_category, "test")) %>%
filter(!(name == "Eyenga pancrace" & is.na(isWinner)))
data <- rbind(data,data1,data2)
data <- data %>%
mutate(across(everything(), ~ gsub("ã©", "é", .))) %>%
mutate(across(everything(), ~ gsub("ã¨", "è", .))) %>%
mutate(across(everything(), ~ gsub("Ã©", "é", .))) %>%
mutate(across(everything(), ~ gsub("Yaounde", "Yaoundé", .))) %>%
mutate(across(everything(), ~ gsub("Yde", "Yaoundé", .))) %>%
mutate(across(everything(), ~ gsub("Ã¨", "E", .)))
data <- data %>%
mutate(isWinner = ifelse(is.na(isWinner), "lose", isWinner))
data$gender <- gsub("Female","Femme",data$gender)
data$gender <- gsub("Male","Homme",data$gender)
# Appliquer la transformation à la colonne du dataframe
data <- data %>%
mutate(formatted_date = sapply(createdAt, extract_and_format_date))
data$formatted_date <- as.character(data$formatted_date)
data$formatted_date <- as.Date(data$formatted_date)
data <- data %>%
mutate(Age = sapply(age, convert_and_categorize))
data$location_patenaire <- stringr::str_to_upper(data$location_patenaire)
data <- data %>%
mutate(
ville = sapply(location_patenaire, extract_ville),
quartier = mapply(extract_quartier, location_patenaire, sapply(location_patenaire, extract_ville))
)
data$ville <-ifelse(data$ville=="", "YAOUNDÉ",data$ville)
View(data)
data$quartier <-ifelse(data$quartier=="", data$quartier,data$ville)
View(data)
data <- data %>%
filter(!str_detect(name, "Marc Arthur FOUDA") & !str_detect(name, "DOM") & !str_detect(name, "dom2")
& !str_detect(name, "Kaeyros") & !str_detect(achat_category, "Test") & !str_detect(achat_category, "test")) %>%
filter(!(name == "Eyenga pancrace" & is.na(isWinner)))
data <- rbind(data,data1,data2)
#data <- read.csv(paste(folder_path,"/users.csv",sep = ""))
data <- read_excel((paste(folder_path,"/users.xls",sep = "")))
data1 <- read_excel((paste(folder_path,"/carimo_data_0308_07.xlsx",sep = "")))
data2 <- read_excel((paste(folder_path,"/carimo_0910_07.xlsx",sep = "")))
data$achat_category <- str_to_lower(data$achat_category)
data1$achat_category <- str_to_lower(data1$achat_category)
data2$achat_category <- str_to_lower(data2$achat_category)
path_product <- paste(folder_path,"/carimo_products_1.xlsx", sep = "")
products <- read_excel(path_product,sheet = "products")
data <- data %>%
filter(!str_detect(name, "Marc Arthur FOUDA") & !str_detect(name, "DOM") & !str_detect(name, "dom2")
& !str_detect(name, "Kaeyros") & !str_detect(achat_category, "Test") & !str_detect(achat_category, "test")) %>%
filter(!(name == "Eyenga pancrace" & is.na(isWinner)))
data <- rbind(data,data1,data2)
data <- data %>%
mutate(across(everything(), ~ gsub("ã©", "é", .))) %>%
mutate(across(everything(), ~ gsub("ã¨", "è", .))) %>%
mutate(across(everything(), ~ gsub("Ã©", "é", .))) %>%
mutate(across(everything(), ~ gsub("Yaounde", "Yaoundé", .))) %>%
mutate(across(everything(), ~ gsub("Yde", "Yaoundé", .))) %>%
mutate(across(everything(), ~ gsub("Ã¨", "E", .)))
data <- data %>%
mutate(isWinner = ifelse(is.na(isWinner), "lose", isWinner))
data$gender <- gsub("Female","Femme",data$gender)
data$gender <- gsub("Male","Homme",data$gender)
# Appliquer la transformation à la colonne du dataframe
data <- data %>%
mutate(formatted_date = sapply(createdAt, extract_and_format_date))
data$formatted_date <- as.character(data$formatted_date)
data$formatted_date <- as.Date(data$formatted_date)
data <- data %>%
mutate(Age = sapply(age, convert_and_categorize))
data$location_patenaire <- stringr::str_to_upper(data$location_patenaire)
data <- data %>%
mutate(
ville = sapply(location_patenaire, extract_ville),
quartier = mapply(extract_quartier, location_patenaire, sapply(location_patenaire, extract_ville))
)
data$ville <-ifelse(data$ville=="", "YAOUNDÉ",data$ville)
data$quartier <-ifelse(data$quartier=="", data$ville,data$quartier)
View(data)
runApp()
runApp()
View(data_geo)
runApp()
View(geo)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
